package game;
import graphics.Draw;
import graphics.Drawable;

import static game.Result.*;

/**
 * Eszkimó karaktertípus esetén megadja a maximális testhõ mértékét,
 * illetve kezeli az eszkimó különleges képességét, tehát az igloo építésének menetét.
 */
public class Eskimo extends Player {
    /**
     * Statikus attribútum. Az eszkimó testhõ szintjének maximális számát adja meg.
     */
    private static int heatlimit = 5;

    /**
     * Default constructor
     */
    public Eskimo(Game g, Field actual, char c, int h) {
        super(g, actual, c, h);
    }

    @Override
    /**
     * Legelõször megvizsgálja, hogy az adott játékos heat attribútumának értéke a maximális érték alatt van-e.
     *      * Amennyiben igen, akkor megnöveli eggyel az értékét, majd OK visszatérési értéket ad.
     *      * Ellenkezõ esetben kimarad a növelés, és NOTHING értékkel tér vissza.
     */
    public Result increaseHeat() {
        if(heat < heatlimit) {
            heat++;
            return OK;
        }
        return NOTHING;
    }

    @Override
    /**
     * A Player osztályban lévõ absztrakt függvény megvalósítása. Meghívja az actualfield attribútumban eltárolt
     * Field-re a buildIgloo() függvényt, majd ennek visszatérési értékével (OK/ NOTHING) tér vissza
     * ez a metódus is.
     */
    public Result specialSkill() {
        Igloo igloo = new Igloo();
        return actualfield.build(igloo);
    }

    @Override
    public void draw(Draw draw, int x, int y) {
        switch(this.getColor()){
            case 'b':
                draw.esbDraw(x,y);
                break;
            case 'g':
                draw.esgDraw(x,y);
                break;
            case 'o':
                draw.esoDraw(x,y);
                break;
            case 'p':
                draw.espDraw(x,y);
                break;
            case 'r':
                draw.esrDraw(x,y);
                break;
            case 'y':
                draw.esyDraw(x,y);
                break;
            default:
                break;
        }
    }
}